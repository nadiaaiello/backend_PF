 <header>
        <nav>
            <ul>
                <li><a href="/products">Productos</a></li>
                <li><a href="/cart">Carrito</a></li>
                <li><a href="/login">Iniciar Sesión</a></li>
                <li><a href="/profile">Perfil</a></li>
            </ul>
        </nav>
    </header>
    <h1>Your Cart</h1>
<div id="cart-container"></div>
{{!-- <button id="empty-cart">Empty Cart</button> --}}
<button id="buy-cart">Buy Cart</button>

<script>
  const cartContainer = document.getElementById("cart-container");
  //const emptyCartButton = document.getElementById("empty-cart");
  const buyCartButton = document.getElementById("buy-cart");

  const loadCart = async () => {
    const token = localStorage.getItem("token");
    let cart;

    if (token) {
      // Fetch cart from MongoDB with populated product details
      const response = await fetch("/api/carts/user", {
        headers: { Authorization: `Bearer ${token}` },
      });

      const data = await response.json();
      if (response.ok) {
        cart = data.products.map(({ product, quantity }) => ({
          ...product, // The populated product details
          quantity,
        }));
      } else {
        console.error(data.error);
        cart = [];
      }
    } else {
      // Fetch cart from localStorage
      const localCart = JSON.parse(localStorage.getItem("cart")) || { products: [] };

      // Fetch product details for each item in the cart
      cart = await Promise.all(
        localCart.products.map(async ({ product, quantity }) => {
          const response = await fetch(`/api/products/${product}`);
          const productData = await response.json();
          return { ...productData, quantity };
        })
      );
    }

    // Render cart
    renderCart(cart);
  };

  const renderCart = (cart) => {
    if (!cart.length) {
      cartContainer.innerHTML = "<p>Your cart is empty.</p>";
      return;
    }

    cartContainer.innerHTML = cart
      .map(
        (product) => `
        <div>
          <h3>${product.title}</h3>
          <p>${product.description}</p>
          <p>Price: $${product.price}</p>
          <p>Stock: ${product.stock}</p>
          <p>Quantity: 
            <button data-id="${product._id}" class="decrease">-</button>
            ${product.quantity}
            <button data-id="${product._id}" class="increase">+</button>
          </p>
        </div>`
      )
      .join("");

    // Add event listeners to buttons
    document.querySelectorAll(".increase").forEach((button) =>
      button.addEventListener("click", modifyQuantity)
    );
    document.querySelectorAll(".decrease").forEach((button) =>
      button.addEventListener("click", modifyQuantity)
    );
  };

  const modifyQuantity = async (e) => {
  const productId = e.target.getAttribute("data-id");
  const action = e.target.classList.contains("increase") ? "increase" : "decrease";
  const token = localStorage.getItem("token");

  if (token) {
    try {
      // Obtener el cartId de la API si aún no está definido
      const responseCart = await fetch("/api/carts/user", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!responseCart.ok) {
        const error = await responseCart.json();
        throw new Error(error.error);
      }
      const cartData = await responseCart.json();
      const cartId = cartData._id;

      // Modificar cantidad en el carrito de MongoDB
      const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ action }), // Usar "increase" o "decrease" como acción
      });

      if (response.ok) {
        loadCart();
      } else {
        const error = await response.json();
        console.error(error.error);
      }
    } catch (error) {
      console.error("Error modifying product quantity:", error.message);
    }
  } else {
    // Modificar cantidad en el carrito de localStorage
    let cart = JSON.parse(localStorage.getItem("cart")) || { products: [] };
    const productIndex = cart.products.findIndex((item) => item.product === productId);

    if (productIndex >= 0) {
      if (action === "increase") {
        cart.products[productIndex].quantity += 1;
      } else if (action === "decrease" && cart.products[productIndex].quantity > 1) {
        cart.products[productIndex].quantity -= 1;
      } else {
        cart.products.splice(productIndex, 1); // Eliminar producto si la cantidad llega a 0
      }
      localStorage.setItem("cart", JSON.stringify(cart));
      loadCart();
    }
  }
};


  {{!-- emptyCartButton.addEventListener("click", async () => {
    const token = localStorage.getItem("token");

    if (token) {
      // Empty MongoDB cart
      const response = await fetch("/api/carts/clear", {
        method: "GET",
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        loadCart();
      } else {
        const error = await response.json();
        console.error(error.error);
      }
    } else {
      // Empty localStorage cart
      cart = {products:[]}
      localStorage.setItem("cart", JSON.stringify(cart))
      loadCart();
    }
  }); --}}

  buyCartButton.addEventListener("click", async () => {
  const token = localStorage.getItem("token");

  if (token) {
    try {
      const response = await fetch("/api/carts/checkout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const result = await response.json();
        alert("Purchase successful! Your order ID: " + result.orderId);
        loadCart();
      } else {
        const error = await response.json();
        console.error(error.error);
        alert("Error during checkout: " + error.error);
      }
    } catch (error) {
      console.error("Error during checkout:", error.message);
      alert("An error occurred during checkout.");
    }
  } else {
    alert("Please log in to complete your purchase.");
  }
});

  loadCart();
</script>
